// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Event_2eproto();
void protobuf_AssignDesc_Event_2eproto();
void protobuf_ShutdownFile_Event_2eproto();

class Event;

enum Event_EventType {
  Event_EventType_ET_INVALID = 0,
  Event_EventType_ET_SUICIDE = 1,
  Event_EventType_ET_GENERAL_ACK = 2,
  Event_EventType_ET_RUN_AS_MASTER = 3,
  Event_EventType_ET_RUN_AS_SLAVE = 4,
  Event_EventType_ET_FORK_REQUEST = 5,
  Event_EventType_ET_ALIVE_REQUEST = 6,
  Event_EventType_ET_KILL_REQUEST = 7,
  Event_EventType_ET_FINISHED = 8,
  Event_EventType_ET_KILLED = 9,
  Event_EventType_ET_DATA = 10
};
bool Event_EventType_IsValid(int value);
const Event_EventType Event_EventType_EventType_MIN = Event_EventType_ET_INVALID;
const Event_EventType Event_EventType_EventType_MAX = Event_EventType_ET_DATA;
const int Event_EventType_EventType_ARRAYSIZE = Event_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor();
inline const ::std::string& Event_EventType_Name(Event_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_EventType_descriptor(), value);
}
inline bool Event_EventType_Parse(
    const ::std::string& name, Event_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_EventType>(
    Event_EventType_descriptor(), name, value);
}
enum Event_DataType {
  Event_DataType_DT_INVALID = 0,
  Event_DataType_DT_STRING = 1,
  Event_DataType_DT_INT32 = 2,
  Event_DataType_DT_UINT32 = 3,
  Event_DataType_DT_BOOL = 4,
  Event_DataType_DT_BINARY = 5,
  Event_DataType_DT_NUMBER = 6,
  Event_DataType_DT_FUNCTION = 7,
  Event_DataType_DT_ARRAY = 8,
  Event_DataType_DT_EXCEPTION = 9
};
bool Event_DataType_IsValid(int value);
const Event_DataType Event_DataType_DataType_MIN = Event_DataType_DT_INVALID;
const Event_DataType Event_DataType_DataType_MAX = Event_DataType_DT_EXCEPTION;
const int Event_DataType_DataType_ARRAYSIZE = Event_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_DataType_descriptor();
inline const ::std::string& Event_DataType_Name(Event_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_DataType_descriptor(), value);
}
inline bool Event_DataType_Parse(
    const ::std::string& name, Event_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_DataType>(
    Event_DataType_descriptor(), name, value);
}
// ===================================================================

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();
  
  Event(const Event& from);
  
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();
  
  void Swap(Event* other);
  
  // implements Message ----------------------------------------------
  
  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Event_EventType EventType;
  static const EventType ET_INVALID = Event_EventType_ET_INVALID;
  static const EventType ET_SUICIDE = Event_EventType_ET_SUICIDE;
  static const EventType ET_GENERAL_ACK = Event_EventType_ET_GENERAL_ACK;
  static const EventType ET_RUN_AS_MASTER = Event_EventType_ET_RUN_AS_MASTER;
  static const EventType ET_RUN_AS_SLAVE = Event_EventType_ET_RUN_AS_SLAVE;
  static const EventType ET_FORK_REQUEST = Event_EventType_ET_FORK_REQUEST;
  static const EventType ET_ALIVE_REQUEST = Event_EventType_ET_ALIVE_REQUEST;
  static const EventType ET_KILL_REQUEST = Event_EventType_ET_KILL_REQUEST;
  static const EventType ET_FINISHED = Event_EventType_ET_FINISHED;
  static const EventType ET_KILLED = Event_EventType_ET_KILLED;
  static const EventType ET_DATA = Event_EventType_ET_DATA;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Event_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Event_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Event_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return Event_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return Event_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return Event_EventType_Parse(name, value);
  }
  
  typedef Event_DataType DataType;
  static const DataType DT_INVALID = Event_DataType_DT_INVALID;
  static const DataType DT_STRING = Event_DataType_DT_STRING;
  static const DataType DT_INT32 = Event_DataType_DT_INT32;
  static const DataType DT_UINT32 = Event_DataType_DT_UINT32;
  static const DataType DT_BOOL = Event_DataType_DT_BOOL;
  static const DataType DT_BINARY = Event_DataType_DT_BINARY;
  static const DataType DT_NUMBER = Event_DataType_DT_NUMBER;
  static const DataType DT_FUNCTION = Event_DataType_DT_FUNCTION;
  static const DataType DT_ARRAY = Event_DataType_DT_ARRAY;
  static const DataType DT_EXCEPTION = Event_DataType_DT_EXCEPTION;
  static inline bool DataType_IsValid(int value) {
    return Event_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Event_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Event_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Event_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Event_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Event_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Event_DataType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Event.EventType type = 1 [default = ET_INVALID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Event_EventType type() const;
  inline void set_type(::Event_EventType value);
  
  // optional .Event.DataType data_type = 2 [default = DT_INVALID];
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::Event_DataType data_type() const;
  inline void set_data_type(::Event_DataType value);
  
  // optional uint32 sender_pid = 3;
  inline bool has_sender_pid() const;
  inline void clear_sender_pid();
  static const int kSenderPidFieldNumber = 3;
  inline ::google::protobuf::uint32 sender_pid() const;
  inline void set_sender_pid(::google::protobuf::uint32 value);
  
  // optional uint32 receiver_pid = 4;
  inline bool has_receiver_pid() const;
  inline void clear_receiver_pid();
  static const int kReceiverPidFieldNumber = 4;
  inline ::google::protobuf::uint32 receiver_pid() const;
  inline void set_receiver_pid(::google::protobuf::uint32 value);
  
  // optional string sender_name = 5;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 5;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  
  // optional string receiver_name = 6;
  inline bool has_receiver_name() const;
  inline void clear_receiver_name();
  static const int kReceiverNameFieldNumber = 6;
  inline const ::std::string& receiver_name() const;
  inline void set_receiver_name(const ::std::string& value);
  inline void set_receiver_name(const char* value);
  inline void set_receiver_name(const char* value, size_t size);
  inline ::std::string* mutable_receiver_name();
  inline ::std::string* release_receiver_name();
  
  // optional string str_data = 7;
  inline bool has_str_data() const;
  inline void clear_str_data();
  static const int kStrDataFieldNumber = 7;
  inline const ::std::string& str_data() const;
  inline void set_str_data(const ::std::string& value);
  inline void set_str_data(const char* value);
  inline void set_str_data(const char* value, size_t size);
  inline ::std::string* mutable_str_data();
  inline ::std::string* release_str_data();
  
  // repeated string str_array = 8;
  inline int str_array_size() const;
  inline void clear_str_array();
  static const int kStrArrayFieldNumber = 8;
  inline const ::std::string& str_array(int index) const;
  inline ::std::string* mutable_str_array(int index);
  inline void set_str_array(int index, const ::std::string& value);
  inline void set_str_array(int index, const char* value);
  inline void set_str_array(int index, const char* value, size_t size);
  inline ::std::string* add_str_array();
  inline void add_str_array(const ::std::string& value);
  inline void add_str_array(const char* value);
  inline void add_str_array(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& str_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str_array();
  
  // optional int32 int32_data = 9;
  inline bool has_int32_data() const;
  inline void clear_int32_data();
  static const int kInt32DataFieldNumber = 9;
  inline ::google::protobuf::int32 int32_data() const;
  inline void set_int32_data(::google::protobuf::int32 value);
  
  // repeated int32 int32_array = 10;
  inline int int32_array_size() const;
  inline void clear_int32_array();
  static const int kInt32ArrayFieldNumber = 10;
  inline ::google::protobuf::int32 int32_array(int index) const;
  inline void set_int32_array(int index, ::google::protobuf::int32 value);
  inline void add_int32_array(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_array() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_array();
  
  // optional uint32 uint32_data = 11;
  inline bool has_uint32_data() const;
  inline void clear_uint32_data();
  static const int kUint32DataFieldNumber = 11;
  inline ::google::protobuf::uint32 uint32_data() const;
  inline void set_uint32_data(::google::protobuf::uint32 value);
  
  // repeated uint32 uint32_array = 12;
  inline int uint32_array_size() const;
  inline void clear_uint32_array();
  static const int kUint32ArrayFieldNumber = 12;
  inline ::google::protobuf::uint32 uint32_array(int index) const;
  inline void set_uint32_array(int index, ::google::protobuf::uint32 value);
  inline void add_uint32_array(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uint32_array() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uint32_array();
  
  // optional double double_data = 13;
  inline bool has_double_data() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 13;
  inline double double_data() const;
  inline void set_double_data(double value);
  
  // repeated double double_array = 14;
  inline int double_array_size() const;
  inline void clear_double_array();
  static const int kDoubleArrayFieldNumber = 14;
  inline double double_array(int index) const;
  inline void set_double_array(int index, double value);
  inline void add_double_array(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_array() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_array();
  
  // optional bool bool_data = 15;
  inline bool has_bool_data() const;
  inline void clear_bool_data();
  static const int kBoolDataFieldNumber = 15;
  inline bool bool_data() const;
  inline void set_bool_data(bool value);
  
  // repeated bool bool_array = 16;
  inline int bool_array_size() const;
  inline void clear_bool_array();
  static const int kBoolArrayFieldNumber = 16;
  inline bool bool_array(int index) const;
  inline void set_bool_array(int index, bool value);
  inline void add_bool_array(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bool_array() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bool_array();
  
  // optional bytes binary_data = 17;
  inline bool has_binary_data() const;
  inline void clear_binary_data();
  static const int kBinaryDataFieldNumber = 17;
  inline const ::std::string& binary_data() const;
  inline void set_binary_data(const ::std::string& value);
  inline void set_binary_data(const char* value);
  inline void set_binary_data(const void* value, size_t size);
  inline ::std::string* mutable_binary_data();
  inline ::std::string* release_binary_data();
  
  // optional uint32 request_id = 18;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 18;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);
  
  // repeated .Event.DataType array_data = 19;
  inline int array_data_size() const;
  inline void clear_array_data();
  static const int kArrayDataFieldNumber = 19;
  inline ::Event_DataType array_data(int index) const;
  inline void set_array_data(int index, ::Event_DataType value);
  inline void add_array_data(::Event_DataType value);
  inline const ::google::protobuf::RepeatedField<int>& array_data() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_array_data();
  
  // repeated uint32 array_length = 20;
  inline int array_length_size() const;
  inline void clear_array_length();
  static const int kArrayLengthFieldNumber = 20;
  inline ::google::protobuf::uint32 array_length(int index) const;
  inline void set_array_length(int index, ::google::protobuf::uint32 value);
  inline void add_array_length(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      array_length() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_array_length();
  
  // @@protoc_insertion_point(class_scope:Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_sender_pid();
  inline void clear_has_sender_pid();
  inline void set_has_receiver_pid();
  inline void clear_has_receiver_pid();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_receiver_name();
  inline void clear_has_receiver_name();
  inline void set_has_str_data();
  inline void clear_has_str_data();
  inline void set_has_int32_data();
  inline void clear_has_int32_data();
  inline void set_has_uint32_data();
  inline void clear_has_uint32_data();
  inline void set_has_double_data();
  inline void clear_has_double_data();
  inline void set_has_bool_data();
  inline void clear_has_bool_data();
  inline void set_has_binary_data();
  inline void clear_has_binary_data();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  int data_type_;
  ::google::protobuf::uint32 sender_pid_;
  ::google::protobuf::uint32 receiver_pid_;
  ::std::string* sender_name_;
  ::std::string* receiver_name_;
  ::std::string* str_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_array_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_array_;
  ::google::protobuf::int32 int32_data_;
  ::google::protobuf::uint32 uint32_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uint32_array_;
  double double_data_;
  ::google::protobuf::RepeatedField< double > double_array_;
  ::google::protobuf::RepeatedField< bool > bool_array_;
  bool bool_data_;
  ::google::protobuf::uint32 request_id_;
  ::std::string* binary_data_;
  ::google::protobuf::RepeatedField<int> array_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > array_length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event

// required .Event.EventType type = 1 [default = ET_INVALID];
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Event_EventType Event::type() const {
  return static_cast< ::Event_EventType >(type_);
}
inline void Event::set_type(::Event_EventType value) {
  GOOGLE_DCHECK(::Event_EventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Event.DataType data_type = 2 [default = DT_INVALID];
inline bool Event::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::Event_DataType Event::data_type() const {
  return static_cast< ::Event_DataType >(data_type_);
}
inline void Event::set_data_type(::Event_DataType value) {
  GOOGLE_DCHECK(::Event_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
}

// optional uint32 sender_pid = 3;
inline bool Event::has_sender_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_sender_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_sender_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_sender_pid() {
  sender_pid_ = 0u;
  clear_has_sender_pid();
}
inline ::google::protobuf::uint32 Event::sender_pid() const {
  return sender_pid_;
}
inline void Event::set_sender_pid(::google::protobuf::uint32 value) {
  set_has_sender_pid();
  sender_pid_ = value;
}

// optional uint32 receiver_pid = 4;
inline bool Event::has_receiver_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_receiver_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_receiver_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_receiver_pid() {
  receiver_pid_ = 0u;
  clear_has_receiver_pid();
}
inline ::google::protobuf::uint32 Event::receiver_pid() const {
  return receiver_pid_;
}
inline void Event::set_receiver_pid(::google::protobuf::uint32 value) {
  set_has_receiver_pid();
  receiver_pid_ = value;
}

// optional string sender_name = 5;
inline bool Event::has_sender_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_sender_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& Event::sender_name() const {
  return *sender_name_;
}
inline void Event::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void Event::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void Event::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* Event::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string receiver_name = 6;
inline bool Event::has_receiver_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_receiver_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_receiver_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_receiver_name() {
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    receiver_name_->clear();
  }
  clear_has_receiver_name();
}
inline const ::std::string& Event::receiver_name() const {
  return *receiver_name_;
}
inline void Event::set_receiver_name(const ::std::string& value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void Event::set_receiver_name(const char* value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void Event::set_receiver_name(const char* value, size_t size) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_receiver_name() {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  return receiver_name_;
}
inline ::std::string* Event::release_receiver_name() {
  clear_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_name_;
    receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str_data = 7;
inline bool Event::has_str_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_str_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_str_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_str_data() {
  if (str_data_ != &::google::protobuf::internal::kEmptyString) {
    str_data_->clear();
  }
  clear_has_str_data();
}
inline const ::std::string& Event::str_data() const {
  return *str_data_;
}
inline void Event::set_str_data(const ::std::string& value) {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  str_data_->assign(value);
}
inline void Event::set_str_data(const char* value) {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  str_data_->assign(value);
}
inline void Event::set_str_data(const char* value, size_t size) {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  str_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_str_data() {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  return str_data_;
}
inline ::std::string* Event::release_str_data() {
  clear_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_data_;
    str_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string str_array = 8;
inline int Event::str_array_size() const {
  return str_array_.size();
}
inline void Event::clear_str_array() {
  str_array_.Clear();
}
inline const ::std::string& Event::str_array(int index) const {
  return str_array_.Get(index);
}
inline ::std::string* Event::mutable_str_array(int index) {
  return str_array_.Mutable(index);
}
inline void Event::set_str_array(int index, const ::std::string& value) {
  str_array_.Mutable(index)->assign(value);
}
inline void Event::set_str_array(int index, const char* value) {
  str_array_.Mutable(index)->assign(value);
}
inline void Event::set_str_array(int index, const char* value, size_t size) {
  str_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::add_str_array() {
  return str_array_.Add();
}
inline void Event::add_str_array(const ::std::string& value) {
  str_array_.Add()->assign(value);
}
inline void Event::add_str_array(const char* value) {
  str_array_.Add()->assign(value);
}
inline void Event::add_str_array(const char* value, size_t size) {
  str_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event::str_array() const {
  return str_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Event::mutable_str_array() {
  return &str_array_;
}

// optional int32 int32_data = 9;
inline bool Event::has_int32_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Event::set_has_int32_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Event::clear_has_int32_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Event::clear_int32_data() {
  int32_data_ = 0;
  clear_has_int32_data();
}
inline ::google::protobuf::int32 Event::int32_data() const {
  return int32_data_;
}
inline void Event::set_int32_data(::google::protobuf::int32 value) {
  set_has_int32_data();
  int32_data_ = value;
}

// repeated int32 int32_array = 10;
inline int Event::int32_array_size() const {
  return int32_array_.size();
}
inline void Event::clear_int32_array() {
  int32_array_.Clear();
}
inline ::google::protobuf::int32 Event::int32_array(int index) const {
  return int32_array_.Get(index);
}
inline void Event::set_int32_array(int index, ::google::protobuf::int32 value) {
  int32_array_.Set(index, value);
}
inline void Event::add_int32_array(::google::protobuf::int32 value) {
  int32_array_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Event::int32_array() const {
  return int32_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Event::mutable_int32_array() {
  return &int32_array_;
}

// optional uint32 uint32_data = 11;
inline bool Event::has_uint32_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Event::set_has_uint32_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Event::clear_has_uint32_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Event::clear_uint32_data() {
  uint32_data_ = 0u;
  clear_has_uint32_data();
}
inline ::google::protobuf::uint32 Event::uint32_data() const {
  return uint32_data_;
}
inline void Event::set_uint32_data(::google::protobuf::uint32 value) {
  set_has_uint32_data();
  uint32_data_ = value;
}

// repeated uint32 uint32_array = 12;
inline int Event::uint32_array_size() const {
  return uint32_array_.size();
}
inline void Event::clear_uint32_array() {
  uint32_array_.Clear();
}
inline ::google::protobuf::uint32 Event::uint32_array(int index) const {
  return uint32_array_.Get(index);
}
inline void Event::set_uint32_array(int index, ::google::protobuf::uint32 value) {
  uint32_array_.Set(index, value);
}
inline void Event::add_uint32_array(::google::protobuf::uint32 value) {
  uint32_array_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Event::uint32_array() const {
  return uint32_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Event::mutable_uint32_array() {
  return &uint32_array_;
}

// optional double double_data = 13;
inline bool Event::has_double_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Event::set_has_double_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Event::clear_has_double_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Event::clear_double_data() {
  double_data_ = 0;
  clear_has_double_data();
}
inline double Event::double_data() const {
  return double_data_;
}
inline void Event::set_double_data(double value) {
  set_has_double_data();
  double_data_ = value;
}

// repeated double double_array = 14;
inline int Event::double_array_size() const {
  return double_array_.size();
}
inline void Event::clear_double_array() {
  double_array_.Clear();
}
inline double Event::double_array(int index) const {
  return double_array_.Get(index);
}
inline void Event::set_double_array(int index, double value) {
  double_array_.Set(index, value);
}
inline void Event::add_double_array(double value) {
  double_array_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Event::double_array() const {
  return double_array_;
}
inline ::google::protobuf::RepeatedField< double >*
Event::mutable_double_array() {
  return &double_array_;
}

// optional bool bool_data = 15;
inline bool Event::has_bool_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Event::set_has_bool_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Event::clear_has_bool_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Event::clear_bool_data() {
  bool_data_ = false;
  clear_has_bool_data();
}
inline bool Event::bool_data() const {
  return bool_data_;
}
inline void Event::set_bool_data(bool value) {
  set_has_bool_data();
  bool_data_ = value;
}

// repeated bool bool_array = 16;
inline int Event::bool_array_size() const {
  return bool_array_.size();
}
inline void Event::clear_bool_array() {
  bool_array_.Clear();
}
inline bool Event::bool_array(int index) const {
  return bool_array_.Get(index);
}
inline void Event::set_bool_array(int index, bool value) {
  bool_array_.Set(index, value);
}
inline void Event::add_bool_array(bool value) {
  bool_array_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Event::bool_array() const {
  return bool_array_;
}
inline ::google::protobuf::RepeatedField< bool >*
Event::mutable_bool_array() {
  return &bool_array_;
}

// optional bytes binary_data = 17;
inline bool Event::has_binary_data() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Event::set_has_binary_data() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Event::clear_has_binary_data() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Event::clear_binary_data() {
  if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
    binary_data_->clear();
  }
  clear_has_binary_data();
}
inline const ::std::string& Event::binary_data() const {
  return *binary_data_;
}
inline void Event::set_binary_data(const ::std::string& value) {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  binary_data_->assign(value);
}
inline void Event::set_binary_data(const char* value) {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  binary_data_->assign(value);
}
inline void Event::set_binary_data(const void* value, size_t size) {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  binary_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_binary_data() {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  return binary_data_;
}
inline ::std::string* Event::release_binary_data() {
  clear_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binary_data_;
    binary_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 request_id = 18;
inline bool Event::has_request_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Event::set_has_request_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Event::clear_has_request_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Event::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 Event::request_id() const {
  return request_id_;
}
inline void Event::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// repeated .Event.DataType array_data = 19;
inline int Event::array_data_size() const {
  return array_data_.size();
}
inline void Event::clear_array_data() {
  array_data_.Clear();
}
inline ::Event_DataType Event::array_data(int index) const {
  return static_cast< ::Event_DataType >(array_data_.Get(index));
}
inline void Event::set_array_data(int index, ::Event_DataType value) {
  GOOGLE_DCHECK(::Event_DataType_IsValid(value));
  array_data_.Set(index, value);
}
inline void Event::add_array_data(::Event_DataType value) {
  GOOGLE_DCHECK(::Event_DataType_IsValid(value));
  array_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Event::array_data() const {
  return array_data_;
}
inline ::google::protobuf::RepeatedField<int>*
Event::mutable_array_data() {
  return &array_data_;
}

// repeated uint32 array_length = 20;
inline int Event::array_length_size() const {
  return array_length_.size();
}
inline void Event::clear_array_length() {
  array_length_.Clear();
}
inline ::google::protobuf::uint32 Event::array_length(int index) const {
  return array_length_.Get(index);
}
inline void Event::set_array_length(int index, ::google::protobuf::uint32 value) {
  array_length_.Set(index, value);
}
inline void Event::add_array_length(::google::protobuf::uint32 value) {
  array_length_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Event::array_length() const {
  return array_length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Event::mutable_array_length() {
  return &array_length_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Event_EventType>() {
  return ::Event_EventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Event_DataType>() {
  return ::Event_DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED
