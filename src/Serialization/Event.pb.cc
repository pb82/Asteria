// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sender_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, receiver_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, receiver_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, str_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, str_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, int32_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, int32_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, uint32_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, uint32_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, double_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, bool_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, bool_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, binary_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, array_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, array_length_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_EventType_descriptor_ = Event_descriptor_->enum_type(0);
  Event_DataType_descriptor_ = Event_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\"\347\006\n\005Event\022*\n\004type\030\001 \002(\0162\020."
    "Event.EventType:\nET_INVALID\022.\n\tdata_type"
    "\030\002 \001(\0162\017.Event.DataType:\nDT_INVALID\022\022\n\ns"
    "ender_pid\030\003 \001(\r\022\024\n\014receiver_pid\030\004 \001(\r\022\023\n"
    "\013sender_name\030\005 \001(\t\022\025\n\rreceiver_name\030\006 \001("
    "\t\022\020\n\010str_data\030\007 \001(\t\022\021\n\tstr_array\030\010 \003(\t\022\022"
    "\n\nint32_data\030\t \001(\005\022\023\n\013int32_array\030\n \003(\005\022"
    "\023\n\013uint32_data\030\013 \001(\r\022\024\n\014uint32_array\030\014 \003"
    "(\r\022\023\n\013double_data\030\r \001(\001\022\024\n\014double_array\030"
    "\016 \003(\001\022\021\n\tbool_data\030\017 \001(\010\022\022\n\nbool_array\030\020"
    " \003(\010\022\023\n\013binary_data\030\021 \001(\014\022\022\n\nrequest_id\030"
    "\022 \001(\r\022#\n\narray_data\030\023 \003(\0162\017.Event.DataTy"
    "pe\022\024\n\014array_length\030\024 \003(\r\"\327\001\n\tEventType\022\016"
    "\n\nET_INVALID\020\000\022\016\n\nET_SUICIDE\020\001\022\022\n\016ET_GEN"
    "ERAL_ACK\020\002\022\024\n\020ET_RUN_AS_MASTER\020\003\022\023\n\017ET_R"
    "UN_AS_SLAVE\020\004\022\023\n\017ET_FORK_REQUEST\020\005\022\024\n\020ET"
    "_ALIVE_REQUEST\020\006\022\023\n\017ET_KILL_REQUEST\020\007\022\017\n"
    "\013ET_FINISHED\020\010\022\r\n\tET_KILLED\020\t\022\013\n\007ET_DATA"
    "\020\n\"\242\001\n\010DataType\022\016\n\nDT_INVALID\020\000\022\r\n\tDT_ST"
    "RING\020\001\022\014\n\010DT_INT32\020\002\022\r\n\tDT_UINT32\020\003\022\013\n\007D"
    "T_BOOL\020\004\022\r\n\tDT_BINARY\020\005\022\r\n\tDT_NUMBER\020\006\022\017"
    "\n\013DT_FUNCTION\020\007\022\014\n\010DT_ARRAY\020\010\022\020\n\014DT_EXCE"
    "PTION\020\t", 887);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EventType_descriptor_;
}
bool Event_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_EventType Event::ET_INVALID;
const Event_EventType Event::ET_SUICIDE;
const Event_EventType Event::ET_GENERAL_ACK;
const Event_EventType Event::ET_RUN_AS_MASTER;
const Event_EventType Event::ET_RUN_AS_SLAVE;
const Event_EventType Event::ET_FORK_REQUEST;
const Event_EventType Event::ET_ALIVE_REQUEST;
const Event_EventType Event::ET_KILL_REQUEST;
const Event_EventType Event::ET_FINISHED;
const Event_EventType Event::ET_KILLED;
const Event_EventType Event::ET_DATA;
const Event_EventType Event::EventType_MIN;
const Event_EventType Event::EventType_MAX;
const int Event::EventType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Event_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_DataType_descriptor_;
}
bool Event_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_DataType Event::DT_INVALID;
const Event_DataType Event::DT_STRING;
const Event_DataType Event::DT_INT32;
const Event_DataType Event::DT_UINT32;
const Event_DataType Event::DT_BOOL;
const Event_DataType Event::DT_BINARY;
const Event_DataType Event::DT_NUMBER;
const Event_DataType Event::DT_FUNCTION;
const Event_DataType Event::DT_ARRAY;
const Event_DataType Event::DT_EXCEPTION;
const Event_DataType Event::DataType_MIN;
const Event_DataType Event::DataType_MAX;
const int Event::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event::kTypeFieldNumber;
const int Event::kDataTypeFieldNumber;
const int Event::kSenderPidFieldNumber;
const int Event::kReceiverPidFieldNumber;
const int Event::kSenderNameFieldNumber;
const int Event::kReceiverNameFieldNumber;
const int Event::kStrDataFieldNumber;
const int Event::kStrArrayFieldNumber;
const int Event::kInt32DataFieldNumber;
const int Event::kInt32ArrayFieldNumber;
const int Event::kUint32DataFieldNumber;
const int Event::kUint32ArrayFieldNumber;
const int Event::kDoubleDataFieldNumber;
const int Event::kDoubleArrayFieldNumber;
const int Event::kBoolDataFieldNumber;
const int Event::kBoolArrayFieldNumber;
const int Event::kBinaryDataFieldNumber;
const int Event::kRequestIdFieldNumber;
const int Event::kArrayDataFieldNumber;
const int Event::kArrayLengthFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_type_ = 0;
  sender_pid_ = 0u;
  receiver_pid_ = 0u;
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int32_data_ = 0;
  uint32_data_ = 0u;
  double_data_ = 0;
  bool_data_ = false;
  binary_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_name_;
  }
  if (str_data_ != &::google::protobuf::internal::kEmptyString) {
    delete str_data_;
  }
  if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_data_;
  }
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    data_type_ = 0;
    sender_pid_ = 0u;
    receiver_pid_ = 0u;
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
    if (has_receiver_name()) {
      if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
        receiver_name_->clear();
      }
    }
    if (has_str_data()) {
      if (str_data_ != &::google::protobuf::internal::kEmptyString) {
        str_data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    int32_data_ = 0;
    uint32_data_ = 0u;
    double_data_ = 0;
    bool_data_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_binary_data()) {
      if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
        binary_data_->clear();
      }
    }
    request_id_ = 0u;
  }
  str_array_.Clear();
  int32_array_.Clear();
  uint32_array_.Clear();
  double_array_.Clear();
  bool_array_.Clear();
  array_data_.Clear();
  array_length_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Event.EventType type = 1 [default = ET_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Event_EventType_IsValid(value)) {
            set_type(static_cast< ::Event_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }
      
      // optional .Event.DataType data_type = 2 [default = DT_INVALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Event_DataType_IsValid(value)) {
            set_data_type(static_cast< ::Event_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender_pid;
        break;
      }
      
      // optional uint32 sender_pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_pid_)));
          set_has_sender_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receiver_pid;
        break;
      }
      
      // optional uint32 receiver_pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_pid_)));
          set_has_receiver_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_receiver_name;
        break;
      }
      
      // optional string receiver_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver_name().data(), this->receiver_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_str_data;
        break;
      }
      
      // optional string str_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_data().data(), this->str_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_str_array;
        break;
      }
      
      // repeated string str_array = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_array(0).data(), this->str_array(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_str_array;
        if (input->ExpectTag(72)) goto parse_int32_data;
        break;
      }
      
      // optional int32 int32_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_data_)));
          set_has_int32_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_int32_array;
        break;
      }
      
      // repeated int32 int32_array = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_int32_array())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_array())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_int32_array;
        if (input->ExpectTag(88)) goto parse_uint32_data;
        break;
      }
      
      // optional uint32 uint32_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_data_)));
          set_has_uint32_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_uint32_array;
        break;
      }
      
      // repeated uint32 uint32_array = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_uint32_array())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uint32_array())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_uint32_array;
        if (input->ExpectTag(105)) goto parse_double_data;
        break;
      }
      
      // optional double double_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_data_)));
          set_has_double_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_double_array;
        break;
      }
      
      // repeated double double_array = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113, input, this->mutable_double_array())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_array())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_double_array;
        if (input->ExpectTag(120)) goto parse_bool_data;
        break;
      }
      
      // optional bool bool_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_data_)));
          set_has_bool_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bool_array;
        break;
      }
      
      // repeated bool bool_array = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 128, input, this->mutable_bool_array())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bool_array())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bool_array;
        if (input->ExpectTag(138)) goto parse_binary_data;
        break;
      }
      
      // optional bytes binary_data = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_request_id;
        break;
      }
      
      // optional uint32 request_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_array_data;
        break;
      }
      
      // repeated .Event.DataType array_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_array_data:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Event_DataType_IsValid(value)) {
            add_array_data(static_cast< ::Event_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Event_DataType_IsValid,
                 this->mutable_array_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_array_data;
        if (input->ExpectTag(160)) goto parse_array_length;
        break;
      }
      
      // repeated uint32 array_length = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_array_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_array_length())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_array_length())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_array_length;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Event.EventType type = 1 [default = ET_INVALID];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .Event.DataType data_type = 2 [default = DT_INVALID];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }
  
  // optional uint32 sender_pid = 3;
  if (has_sender_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sender_pid(), output);
  }
  
  // optional uint32 receiver_pid = 4;
  if (has_receiver_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receiver_pid(), output);
  }
  
  // optional string sender_name = 5;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sender_name(), output);
  }
  
  // optional string receiver_name = 6;
  if (has_receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_name().data(), this->receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->receiver_name(), output);
  }
  
  // optional string str_data = 7;
  if (has_str_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_data().data(), this->str_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->str_data(), output);
  }
  
  // repeated string str_array = 8;
  for (int i = 0; i < this->str_array_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str_array(i).data(), this->str_array(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->str_array(i), output);
  }
  
  // optional int32 int32_data = 9;
  if (has_int32_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->int32_data(), output);
  }
  
  // repeated int32 int32_array = 10;
  for (int i = 0; i < this->int32_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->int32_array(i), output);
  }
  
  // optional uint32 uint32_data = 11;
  if (has_uint32_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uint32_data(), output);
  }
  
  // repeated uint32 uint32_array = 12;
  for (int i = 0; i < this->uint32_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->uint32_array(i), output);
  }
  
  // optional double double_data = 13;
  if (has_double_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->double_data(), output);
  }
  
  // repeated double double_array = 14;
  for (int i = 0; i < this->double_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->double_array(i), output);
  }
  
  // optional bool bool_data = 15;
  if (has_bool_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->bool_data(), output);
  }
  
  // repeated bool bool_array = 16;
  for (int i = 0; i < this->bool_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      16, this->bool_array(i), output);
  }
  
  // optional bytes binary_data = 17;
  if (has_binary_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->binary_data(), output);
  }
  
  // optional uint32 request_id = 18;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->request_id(), output);
  }
  
  // repeated .Event.DataType array_data = 19;
  for (int i = 0; i < this->array_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->array_data(i), output);
  }
  
  // repeated uint32 array_length = 20;
  for (int i = 0; i < this->array_length_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->array_length(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Event.EventType type = 1 [default = ET_INVALID];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .Event.DataType data_type = 2 [default = DT_INVALID];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }
  
  // optional uint32 sender_pid = 3;
  if (has_sender_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sender_pid(), target);
  }
  
  // optional uint32 receiver_pid = 4;
  if (has_receiver_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receiver_pid(), target);
  }
  
  // optional string sender_name = 5;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender_name(), target);
  }
  
  // optional string receiver_name = 6;
  if (has_receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_name().data(), this->receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->receiver_name(), target);
  }
  
  // optional string str_data = 7;
  if (has_str_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_data().data(), this->str_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->str_data(), target);
  }
  
  // repeated string str_array = 8;
  for (int i = 0; i < this->str_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_array(i).data(), this->str_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->str_array(i), target);
  }
  
  // optional int32 int32_data = 9;
  if (has_int32_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->int32_data(), target);
  }
  
  // repeated int32 int32_array = 10;
  for (int i = 0; i < this->int32_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->int32_array(i), target);
  }
  
  // optional uint32 uint32_data = 11;
  if (has_uint32_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uint32_data(), target);
  }
  
  // repeated uint32 uint32_array = 12;
  for (int i = 0; i < this->uint32_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->uint32_array(i), target);
  }
  
  // optional double double_data = 13;
  if (has_double_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->double_data(), target);
  }
  
  // repeated double double_array = 14;
  for (int i = 0; i < this->double_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(14, this->double_array(i), target);
  }
  
  // optional bool bool_data = 15;
  if (has_bool_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->bool_data(), target);
  }
  
  // repeated bool bool_array = 16;
  for (int i = 0; i < this->bool_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(16, this->bool_array(i), target);
  }
  
  // optional bytes binary_data = 17;
  if (has_binary_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->binary_data(), target);
  }
  
  // optional uint32 request_id = 18;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->request_id(), target);
  }
  
  // repeated .Event.DataType array_data = 19;
  for (int i = 0; i < this->array_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->array_data(i), target);
  }
  
  // repeated uint32 array_length = 20;
  for (int i = 0; i < this->array_length_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->array_length(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Event.EventType type = 1 [default = ET_INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .Event.DataType data_type = 2 [default = DT_INVALID];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }
    
    // optional uint32 sender_pid = 3;
    if (has_sender_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_pid());
    }
    
    // optional uint32 receiver_pid = 4;
    if (has_receiver_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_pid());
    }
    
    // optional string sender_name = 5;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
    // optional string receiver_name = 6;
    if (has_receiver_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_name());
    }
    
    // optional string str_data = 7;
    if (has_str_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_data());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 int32_data = 9;
    if (has_int32_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_data());
    }
    
    // optional uint32 uint32_data = 11;
    if (has_uint32_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_data());
    }
    
    // optional double double_data = 13;
    if (has_double_data()) {
      total_size += 1 + 8;
    }
    
    // optional bool bool_data = 15;
    if (has_bool_data()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes binary_data = 17;
    if (has_binary_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary_data());
    }
    
    // optional uint32 request_id = 18;
    if (has_request_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }
    
  }
  // repeated string str_array = 8;
  total_size += 1 * this->str_array_size();
  for (int i = 0; i < this->str_array_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_array(i));
  }
  
  // repeated int32 int32_array = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_array(i));
    }
    total_size += 1 * this->int32_array_size() + data_size;
  }
  
  // repeated uint32 uint32_array = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->uint32_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uint32_array(i));
    }
    total_size += 1 * this->uint32_array_size() + data_size;
  }
  
  // repeated double double_array = 14;
  {
    int data_size = 0;
    data_size = 8 * this->double_array_size();
    total_size += 1 * this->double_array_size() + data_size;
  }
  
  // repeated bool bool_array = 16;
  {
    int data_size = 0;
    data_size = 1 * this->bool_array_size();
    total_size += 2 * this->bool_array_size() + data_size;
  }
  
  // repeated .Event.DataType array_data = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->array_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->array_data(i));
    }
    total_size += 2 * this->array_data_size() + data_size;
  }
  
  // repeated uint32 array_length = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->array_length_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->array_length(i));
    }
    total_size += 2 * this->array_length_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  str_array_.MergeFrom(from.str_array_);
  int32_array_.MergeFrom(from.int32_array_);
  uint32_array_.MergeFrom(from.uint32_array_);
  double_array_.MergeFrom(from.double_array_);
  bool_array_.MergeFrom(from.bool_array_);
  array_data_.MergeFrom(from.array_data_);
  array_length_.MergeFrom(from.array_length_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_sender_pid()) {
      set_sender_pid(from.sender_pid());
    }
    if (from.has_receiver_pid()) {
      set_receiver_pid(from.receiver_pid());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_receiver_name()) {
      set_receiver_name(from.receiver_name());
    }
    if (from.has_str_data()) {
      set_str_data(from.str_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_int32_data()) {
      set_int32_data(from.int32_data());
    }
    if (from.has_uint32_data()) {
      set_uint32_data(from.uint32_data());
    }
    if (from.has_double_data()) {
      set_double_data(from.double_data());
    }
    if (from.has_bool_data()) {
      set_bool_data(from.bool_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_binary_data()) {
      set_binary_data(from.binary_data());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_type_, other->data_type_);
    std::swap(sender_pid_, other->sender_pid_);
    std::swap(receiver_pid_, other->receiver_pid_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(receiver_name_, other->receiver_name_);
    std::swap(str_data_, other->str_data_);
    str_array_.Swap(&other->str_array_);
    std::swap(int32_data_, other->int32_data_);
    int32_array_.Swap(&other->int32_array_);
    std::swap(uint32_data_, other->uint32_data_);
    uint32_array_.Swap(&other->uint32_array_);
    std::swap(double_data_, other->double_data_);
    double_array_.Swap(&other->double_array_);
    std::swap(bool_data_, other->bool_data_);
    bool_array_.Swap(&other->bool_array_);
    std::swap(binary_data_, other->binary_data_);
    std::swap(request_id_, other->request_id_);
    array_data_.Swap(&other->array_data_);
    array_length_.Swap(&other->array_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
